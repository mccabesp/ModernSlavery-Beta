@{
    ViewBag.Title = "About you - Modern Slavery reporting service";
    Layout = "~/Views/DfeTemplate.cshtml";
}
@model SignUpViewModel
@inject IWebService WebService
<div class="grid-row">
    <div class="column-full">
        @using (Html.BeginForm(null, null, FormMethod.Post, new { autocomplete = "off" }))
        {
            @await Html.CustomValidationSummaryAsync()
            @Html.AntiForgeryToken()
            @Html.SpamProtectionTimeStamp()
            <h1 class="heading-large">
                Create an account
            </h1>
            if (!User.Identity.IsAuthenticated)
            {
                <p>
                    You will need to create an account to register organisations for Modern Slavery reporting.
                    <br />
                    If you already have an account please <a href="@Url.Action("ManageOrganisations", "Submission")">sign in</a> to report data and manage your organisations.
                </p>
            }

            <fieldset>
                <legend>
                    <h2 class="heading-medium">Email address</h2>
                </legend>
                <p>Enter an email address that you can access. The service will send you an email to verify your identity.</p>
                <div class="form-group @Html.SetErrorClass(model => model.EmailAddress, "error") ">
                    @Html.LabelFor(model => model.EmailAddress, new { @class = "form-label" })
                    @Html.ValidationMessageFor(model => model.EmailAddress, null, new { @class = "error-message" })
                    <div class="col-md-10">
                        @Html.CustomEditorFor(model => model.EmailAddress, new { type = "email", @class = "form-control" })
                    </div>
                </div>
                <div class="form-group @Html.SetErrorClass(model => model.ConfirmEmailAddress, "error") ">
                    @Html.LabelFor(model => model.ConfirmEmailAddress, new { @class = "form-label" })
                    @Html.ValidationMessageFor(model => model.ConfirmEmailAddress, "", new { @class = "error-message" })
                    <div class="col-md-10">
                        @Html.CustomEditorFor(model => model.ConfirmEmailAddress, new { type = "email", @class = "form-control" })
                    </div>
                </div>
            </fieldset>

            <fieldset>
                <legend>
                    <h2 class="heading-medium">Your details</h2>
                </legend>
                <p>Enter your name and job title.</p>
                <div class="form-group @Html.SetErrorClass(model => model.FirstName, "error") ">
                    @Html.LabelFor(model => model.FirstName, new { @class = "form-label" })
                    @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "error-message" })
                    <div class="col-md-10">
                        @Html.CustomEditorFor(model => model.FirstName, new { @class = "form-control" })
                    </div>
                </div>
                <div class="form-group @Html.SetErrorClass(model => model.LastName, "error") ">
                    @Html.LabelFor(model => model.LastName, new { @class = "form-label" })
                    @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "error-message" })
                    <div class="col-md-10">
                        @Html.CustomEditorFor(model => model.LastName, new { @class = "form-control", aria_label = "Add your last name" })
                    </div>
                </div>
                <div class="form-group @Html.SetErrorClass(model => model.JobTitle, "error") ">
                    @Html.LabelFor(model => model.JobTitle, new { @class = "form-label" })
                    @Html.ValidationMessageFor(model => model.JobTitle, "", new { @class = "error-message" })
                    <div class="col-md-10">
                        @Html.CustomEditorFor(model => model.JobTitle, new { @class = "form-control", aria_label = "Add your job title" })
                    </div>
                </div>
            </fieldset>

            <fieldset>
                <legend>
                    <h2 class="heading-medium">Create password</h2>
                </legend>
                <div class="text">
                    <p>Your password must be at least 8 characters long.</p>
                    <p>It must also have at least one of <u>each</u> of the following:</p>
                    <ul class="list list-bullet">
                        <li>lower-case letter</li>
                        <li>capital letter and</li>
                        <li>number</li>
                    </ul>
                </div>
                <div class="form-group @Html.SetErrorClass(model => model.Password, "error") ">
                    @Html.LabelFor(model => model.Password, new { @class = "form-label" })
                    @Html.ValidationMessageFor(model => model.Password, "", new { @class = "error-message" })
                    <div class="col-md-10">
                        @Html.CustomEditorFor(model => model.Password, new { @class = "form-control" })
                    </div>
                </div>
                <div class="form-group @Html.SetErrorClass(model => model.ConfirmPassword, "error") ">
                    @Html.LabelFor(model => model.ConfirmPassword, new { @class = "form-label" })
                    @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "error-message" })
                    <div class="col-md-10">
                        @Html.CustomEditorFor(model => model.ConfirmPassword, new { @class = "form-control" })
                    </div>
                </div>
            </fieldset>

            <fieldset>
                <legend class="visually-hidden">Your email preferences</legend>
                <p>We will only use your contact details to send you information relating to Modern Slavery reporting and, with your consent, for the following purpose.</p>

                <div class="multiple-choice @Html.SetErrorClass(model => model.SendUpdates, "error")">
                    @Html.CheckBoxFor(model => model.SendUpdates, new { @class = "form-control" })
                    @Html.LabelFor(m => m.SendUpdates, new { @class = "form-label" })
                </div>

                <div class="multiple-choice @Html.SetErrorClass(model => model.AllowContact, "error")">
                    @Html.CheckBoxFor(model => model.AllowContact, new { @class = "form-control" })
                    @Html.LabelFor(m => m.AllowContact, new { @class = "form-label" })
                </div>

            </fieldset>

            <div class="form-group">
                <input type="submit" class="button" value="Continue" />
            </div>
        }
    </div>
</div>