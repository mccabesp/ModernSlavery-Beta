@inject IWebService WebService
@using ModernSlavery.Core.Interfaces.Downloadable
@model IEnumerable<ModernSlavery.Core.Interfaces.Downloadable.IDownloadableItem>
@{
    var logType = ViewData["logType"];
    var actionName = ViewData["actionName"].ToString();

    var types = Model
        .Where(d => d.GetType() == typeof(IDownloadableFile))
        .Select(x => ((IDownloadableFile)x).Type)
        .Distinct()
        .ToList();
}

@section BeforeMain {
    <a class="govuk-back-link govuk-!-margin-bottom-0" href="@Url.Action("Home")">Back to Adminstration home</a>
}

<div class="govuk-grid-row">
    <div class="govuk-grid-column-full">
        <div style="float: right; font-size: smaller;">
            <span>
                <a class="govuk-link" href="@Url.Action(actionName, new {v = Guid.NewGuid().ToShortString()})" title="Show more recent content">@VirtualDateTime.Now.ToString("d MMM HH:mm")</a>
            </span>
        </div>
        <h1 class="govuk-heading-l" style="margin-top: 0.3em;">
            <span id="companyname">Administration</span> <br />
            <span class="govuk-hint govuk-!-font-size-24 govuk-!-margin-top-2">@logType Logs</span>
        </h1>


        @foreach (var directoryInfo in Model
          .Where(d => d.GetType() == typeof(IDownloadableDirectory)))
        {
            @if (directoryInfo.Filepath.ToLower() == "logs")
            {
                continue;
            } // do not print the root (parent is 'logs')
            <div>Directory <a class="govuk-link" href="@Url.Action(actionName, new {fp = directoryInfo.Filepath})">@directoryInfo.Name</a></div>
        }

        <br />

        <table class="govuk-table">
            <thead class="govuk-table__head">
                <tr>
                    <th scope="col" class="govuk-table__header">Description</th>
                    <th scope="col" class="govuk-table__header">File</th>
                </tr>
            </thead>
            <tbody class="govuk-table__body">

                @if (!types.Any())
                {
                    <tr class="govuk-table__row">
                        <td class="govuk-table__cell" colspan="2">No files found in this directory</td>
                    </tr>
                }

                @foreach (var type in types)
                {
                    var downloads = Model
                        .Where(d => d.GetType() == typeof(IDownloadableFile))
                        .Where(f => ((IDownloadableFile)f).Type.EqualsI(type))
                        .OrderByDescending(x => ((IDownloadableFile)x).Modified);

                    <tr class="govuk-table__row">
                        <td class="govuk-table__cell" colspan="2">
                            <b>@type Downloads</b>
                        </td>
                    </tr>
                    if (!downloads.Any())
                    {
                        <tr class="govuk-table__row">
                            <td class="govuk-table__cell" colspan="2">No @type.ToLower() found</td>
                        </tr>
                    }
                    else
                    {
                        foreach (IDownloadableFile download in downloads)
                        {
                            <tr class="govuk-table__row">
                                <td class="govuk-table__cell">
                                    <a class="govuk-link" href="@Url.Action("Read", "Admin", new {filePath = download.Filepath})">
                                        <b>@download.Title</b>
                                    </a><br />@download.Description
                                </td>
                                <td class="govuk-table__cell">
                                    <a class="govuk-link" download="true" href="@Url.Action("Download", "Admin", new {filePath = download.Filepath})" target="_blank">@download.Name</a>
                                </td>
                            </tr>
                        }
                    }
                }

            </tbody>
        </table>

    </div>
</div>