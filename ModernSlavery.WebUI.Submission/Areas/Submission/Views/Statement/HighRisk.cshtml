@{
    Layout = "/Views/GdsLayout.cshtml";
}
@model HighRiskViewModel
@using ModernSlavery.Core.Entities.StatementSummary.V1;
@using ModernSlavery.Core.Interfaces;
@inject IGovUkCountryProvider CountryProvider

@using static ModernSlavery.Core.Entities.StatementSummary.V1.StatementSummary.StatementRisk;
@section BeforeMain {
    <a class="govuk-back-link" href="@Model.BackUrl">Back</a>
}
<div class="app-high-risk govuk-grid-row">
    <div class="govuk-grid-column-two-thirds">
        @using (Html.BeginForm(null, null, FormMethod.Post, new { novalidate = "" }))
        {
            @await Html.GovUkValidationSummaryAsync();
            @Html.AntiForgeryToken();
            @Html.HiddenFor(m => m.Submitted);
            @Html.HiddenFor(m => m.TotalRisks);
            @Html.HiddenFor(m => m.Description);

            <h1 class="govuk-heading-l govuk-!-margin-bottom-5">
                @Model.PageTitle
            </h1>
            <div class="govuk-inset-text govuk-!-margin-bottom-7">
                <div class="risk-description-edit">
                    <a href="@Model.BackUrl">Edit</a>
                </div>
                <div class="risk-description">
                    @Model.Description
                </div>
            </div>

            <div class="govuk-form-group govuk-!-margin-bottom-5">
                <fieldset class="govuk-fieldset">
                    <legend class="govuk-fieldset__legend govuk-fieldset__legend--m">
                        <h2 class="govuk-fieldset__heading">
                            Where was the risk you described most likely to occur?
                        </h2>
                    </legend>
                    <div class="govuk-radios govuk-radios--conditional" data-module="govuk-radios">
                        @foreach (var riskSource in Enums.GetValuesExcept<RiskSourceTypes>(RiskSourceTypes.Unknown))
                        {
                            var value = (int)riskSource;
                            var isOther = riskSource == RiskSourceTypes.Other;
                            var isSupplyChain = riskSource == RiskSourceTypes.SupplyChains;

                            <div class="govuk-radios__item">
                                <input name="LikelySource" class="govuk-radios__input" id="source-@value" value="@value" type="radio" checked=@(Model.LikelySource == riskSource) data-aria-controls="@(isOther || isSupplyChain ? $"conditional-source-{value}" : "")">
                                <label class="govuk-label govuk-radios__label" for="source-@value">
                                    @riskSource.GetEnumDescription()
                                </label>
                            </div>

                            if (isSupplyChain)
                            {
                                <div class="govuk-radios__conditional govuk-radios__conditional--hidden" id="conditional-source-@value">
                                    <div class="govuk-form-group @Html.SetErrorClass(model => model.SupplyChainTiers, "govuk-form-group--error")">
                                        <span id="supply-chains-hint" class="govuk-hint">
                                            Select all that apply
                                        </span>

                                        <div class="govuk-checkboxes">
                                            @foreach (var tier in Enums.GetValuesExcept<SupplyChainTierTypes>(SupplyChainTierTypes.Unknown))
                                            {
                                                var tierValue = (int)tier;
                                                var isNone = tier == SupplyChainTierTypes.None;
                                                if (isNone)
                                                {
                                                    <div class="govuk-!-margin-bottom-4 govuk-!-margin-left-2">
                                                        or
                                                    </div>
                                                }
                                                <div class="govuk-checkboxes__item">
                                                    <input name="SupplyChainTiers" class="govuk-checkboxes__input" id="tier-@tierValue" value="@tierValue" type="checkbox" data-mutually-exclusive-group="@isNone.ToString()" checked="@(Model.SupplyChainTiers.Contains(tier))">
                                                    <label class="govuk-label govuk-checkboxes__label govuk-!-font-weight-bold" for="tier-@tierValue">
                                                        @tier.GetEnumDescription()
                                                    </label>
                                                    @if (!isNone)
                                                    {
                                                        <div id="tier-hint-@tierValue" class="govuk-hint govuk-!-margin-left-3">
                                                            @switch (tier)
                                                            {
                                                                case SupplyChainTierTypes.Tier1:
                                                                    <text>Provide their products and services directly to your organisation.</text>
                                                                    break;
                                                                case SupplyChainTierTypes.Tier2:
                                                                    <text>Provide products and services to your organisation via your Tier 1 suppliers.</text>
                                                                    break;
                                                                case SupplyChainTierTypes.Tier3:
                                                                    <text>Provide products and services to your organisation via your Tier 2 suppliers or the next higher level in the chain.</text>
                                                                    break;
                                                                default:
                                                                    break;
                                                            }
                                                        </div>
                                                    }
                                                </div>
                                            }
                                        </div>
                                        <span asp-validation-for="SupplyChainTiers" class="govuk-error-message"></span>
                                    </div>
                                </div>
                            }

                            if (isOther)
                            {
                                <div class="govuk-radios__conditional govuk-radios__conditional--hidden" id="conditional-source-@value">
                                    <div class="govuk-form-group @Html.SetErrorClass(model => model.OtherLikelySource, "govuk-form-group--error")">
                                        <label class="govuk-label" for="OtherLikelySource">
                                            Please specify
                                        </label>
                                        <textarea asp-for="OtherLikelySource" class="govuk-textarea" spellcheck="false" rows="5"></textarea>
                                        <span asp-validation-for="OtherLikelySource" class="govuk-error-message"></span>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </fieldset>
            </div>

            <div class="govuk-form-group govuk-!-margin-bottom-5">
                <fieldset class="govuk-fieldset">
                    <legend class="govuk-fieldset__legend govuk-fieldset__legend--m">
                        <h2 class="govuk-fieldset__heading">
                            Who was most likely to be affected?
                        </h2>
                    </legend>
                    <div class="govuk-checkboxes" data-module="govuk-checkboxes">
                        @foreach (var targetType in Enums.GetValuesExcept<RiskTargetTypes>(RiskTargetTypes.Unknown))
                        {
                            var value = (int)targetType;
                            var isOther = targetType == RiskTargetTypes.Other;
                            <div class="govuk-checkboxes__item">
                                <input name="Targets" value="@value" id="@($"target{value}")" checked=@(Model.Targets.Contains(targetType)) class="govuk-checkboxes__input" type="checkbox" @(isOther ? $"data-aria-controls=targets-conditional-{value}" : "")>
                                <label class="govuk-label govuk-checkboxes__label" for="@($"target{value}")">
                                    @targetType.GetEnumDescription()
                                </label>
                            </div>
                            @if (isOther)
                            {
                                <div class="govuk-checkboxes__conditional govuk-checkboxes__conditional--hidden" id="targets-conditional-@value">
                                    <div class="govuk-form-group @Html.SetErrorClass(model => model.OtherTargets, "govuk-form-group--error")">
                                        <label class="govuk-label" for="OtherTargets">
                                            Please specify
                                        </label>
                                        <input asp-for="OtherTargets" class="govuk-input" spellcheck="false">
                                        <span asp-validation-for="OtherTargets" class="govuk-error-message"></span>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </fieldset>
            </div>

            <div class="govuk-form-group govuk-!-margin-bottom-5">
                <fieldset class="govuk-fieldset">
                    <legend class="govuk-fieldset__legend govuk-fieldset__legend--m">
                        <h2 class="govuk-fieldset__heading">
                            In which country?
                        </h2>
                    </legend>

                    <partial name="Parts/_RiskCountries" model="Model" />

                    <div class="govuk-grid-row">
                        <div class="govuk-grid-column-one-half">
                            <select class="govuk-select" asp-for="SelectedCountry" asp-items="new SelectList(CountryProvider.GetAll(), nameof(GovUkCountry.FullReference), nameof(GovUkCountry.Name))">
                                <option value="" disabled selected>Select a country</option>
                            </select>
                        </div>
                        <div class="govuk-grid-column-one-half">
                            <button id="add-country-button" class="govuk-button govuk-button--secondary" type="submit" name="command" value="@BaseStatementViewModel.CommandType.AddCountry">Add</button>
                        </div>
                    </div>
                </fieldset>
            </div>

            <div class="govuk-character-count govuk-!-margin-bottom-7" data-module="govuk-character-count" data-maxlength="500">
                <div class="govuk-form-group @Html.SetErrorClass(model => model.ActionsOrPlans, "govuk-form-group--error")">
                    <label class="govuk-label govuk-label--m" for="more-detail">
                        Tell us about your actions or plans to address this risk
                    </label>
                    <textarea name="ActionsOrPlans" class="govuk-textarea" rows="5" aria-describedby="actions-info">@Model.ActionsOrPlans</textarea>
                </div>
                <div id="actions-info" class="govuk-hint govuk-character-count__message" aria-live="polite">
                    You can enter up to 500 characters
                </div>
                <span asp-validation-for="ActionsOrPlans" class="govuk-error-message"></span>
            </div>

            <button class="govuk-button govuk-!-margin-right-1" data-module="govuk-button" type="submit" name="command" value="@BaseStatementViewModel.CommandType.Continue">
                Save and continue
            </button>

            <div class="skip-link">
                <a class="govuk-link" href="@(Model.SkipUrl)">Skip this question</a>
            </div>
        }
    </div>

</div>
@section AfterLoadedCompiledScripts {
    <script type="text/javascript" nonce="@Html.GetNonce()">
        (function ($) {
            "use strict";

            var selectElement = document.getElementById('SelectedCountry');

            openregisterLocationPicker({
                selectElement: selectElement,
                url: '/assets/json/location-autocomplete-graph.json',
                // override onconfirm to disable the add button until item selected
                onConfirm: function (result) {
                    var requestedOption = Array.prototype.filter.call(selectElement.options, o => o.innerText === (result && result.name))[0];
                    if (requestedOption) {
                        requestedOption.selected = true;

                        if (document.getElementById("country-line-" + requestedOption.value) == null)
                            $('#add-country-button').prop('disabled', false);
                    }
                }
            });

            var removeButtonClickHandler = function (e) {
                e.preventDefault();

                var table = $(e.target).parents('table');

                // remove row from document
                $(e.target).parents('tr').remove();

                if (table.find('tr').length == 0)
                    table.hide();
                else {
                    // Re-index the hidden input on each row so the server side isnt confused by the indexing
                    table.find('tr').each(function (i, e) {
                        var hiddenInput = $(e).find('input[type=hidden]')
                        hiddenInput.prop('id', 'CountryReferences_' + i + '_');
                        hiddenInput.prop('name', 'CountryReferences[' + i + ']');
                    });
                }

                return false;
            }

            var addButtonClickHandler = function (e) {
                e.preventDefault();

                if (selectElement.selectedOptions.length == 0 || selectElement.selectedOptions[0].disabled) {
                    // nothing selected, show error
                    return false;
                }

                var option = selectElement.selectedOptions[0];
                var reference = option.value;
                var rows = $('#selected-countries tr');

                if (rows.length == 0) {
                    // show the table
                    $('#selected-countries table').show();
                }
                else if (document.getElementById("country-line-" + reference) != null) {
                    // already in table
                    // show error
                    return false;
                }

                var name = option.innerText;
                var index = rows.length;

                var newRow = "<tr id='country-line-" + reference + "' class='govuk-table__row'>" +
                    "<td class='govuk-table__cell'>" + name + "</td>" +
                    "<td class='govuk-table__cell buttons'>" +
                    "<button class='link-button' type='submit' name='toRemove' value='" + reference + "'>Remove</button>" +
                    "<input id='CountryReferences_" + index + "_' name='CountryReferences[" + index + "]' type='hidden' value='" + reference + "'>" +
                    "</td>" +
                    "</tr>";

                $('#selected-countries table tbody').append(newRow);

                // clear selected from autocomplete
                // taken from https://github.com/alphagov/accessible-autocomplete/issues/334#issuecomment-621356224 03/12/2020
                var $enhancedElement = $(selectElement).parent().find('input')
                $enhancedElement.val('');
                $(selectElement).val('');

                $enhancedElement.click();
                $enhancedElement.focus();
                $enhancedElement.blur();

                $('#add-country-button').prop('disabled', true);

                return false;
            }

            $('#add-country-button').prop('disabled', true);

            $(document).on("click", '#selected-countries tr button[name=toRemove]', removeButtonClickHandler)

            $('#add-country-button').click(addButtonClickHandler);

        }(jQuery));
    </script>
}