@{
    Layout = "~/Views/GdsLayout.cshtml";
    ViewBag.Title = "Add your organisation's address - Modern Slavery reporting service";
}
@model OrganisationViewModel
@section BeforeMain {
    @if (!string.IsNullOrWhiteSpace(Model.AddressReturnAction))
    {
        <a href="@Url.Action(Model.AddressReturnAction)" class="govuk-back-link">Back</a>
    }
    else
    {
        <a href="@Url.Action("ChooseOrganisation")" class="govuk-back-link">Back</a>
    }
}
<div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds">

        @using (Html.BeginForm(null, null, FormMethod.Post, new { novalidate = "" }))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model => model.AddressReturnAction)
            @Html.HiddenFor(model => model.AddressSource)
            @Html.HiddenFor(model => model.BackAction)
            @Html.HiddenFor(model => model.CharityNumber)
            @Html.HiddenFor(model => model.CompanyNumber)
            @Html.HiddenFor(model => model.ConfirmReturnAction)
            @Html.HiddenFor(model => model.ContactEmailAddress)
            @Html.HiddenFor(model => model.ContactFirstName)
            @Html.HiddenFor(model => model.ContactJobTitle)
            @Html.HiddenFor(model => model.ContactLastName)
            @Html.HiddenFor(model => model.ContactPhoneNumber)
            @Html.HiddenFor(model => model.ManualOrganisationIndex)
            @Html.HiddenFor(model => model.MatchedReferenceCount)
            @Html.HiddenFor(model => model.MutualNumber)
            @Html.HiddenFor(model => model.NameSource)
            @Html.HiddenFor(model => model.OrganisationName)
            @Html.HiddenFor(model => model.OtherName)
            @Html.HiddenFor(model => model.OtherValue)
            @Html.HiddenFor(model => model.SearchText)
            @Html.HiddenFor(model => model.SectorType)
            @Html.HiddenFor(model => model.RegistrationType)
            @Html.HiddenFor(model => model.SelectedOrganisationIndex)
            @Html.HiddenFor(model => model.SicSource)
            @Html.HiddenFor(model => model.ManualRegistration)
            @Html.HiddenFor(model => model.ManualAddress)
            @Html.HiddenFor(model => model.WrongAddress)
            @Html.HiddenFor(model => model.ManualAuthorised)
            @Html.HiddenFor(model => model.SelectedAuthorised)


            @await Html.GovUkValidationSummaryAsync()
            <h1 class="govuk-heading-l">
                Your organisation's address
            </h1>
            <div class="govuk-form-group">
                <p class="govuk-body">Enter the correspondence address of the organisation you want to register.</p>

                <div class="govuk-form-group @Html.SetErrorClass(model => model.Address1, "govuk-form-group--error") form-group-compound">
                    @Html.LabelFor(model => model.Address1, "Address 1", new { @class = "govuk-label" })
                    @Html.ValidationMessageFor(model => model.Address1, "", new { @class = "govuk-error-message govuk-!-margin-bottom-0" })
                    @Html.CustomEditorFor(model => model.Address1, new { @class = "govuk-input govuk-!-width-one-half" })

                </div>
                <div class="govuk-form-group @Html.SetErrorClass(model => model.Address2, "govuk-form-group--error")">
                    @Html.LabelFor(model => model.Address2, "Address 2", new { @class = "govuk-label" })
                    @Html.ValidationMessageFor(model => model.Address2, "", new { @class = "govuk-error-message govuk-!-margin-bottom-0" })
                    @Html.CustomEditorFor(model => model.Address2, new { @class = "govuk-input govuk-!-width-one-half", placeholder = "optional" })

                </div>
                <div class="govuk-form-group @Html.SetErrorClass(model => model.Address3, "govuk-form-group--error")">
                    @Html.LabelFor(model => model.Address3, "Address 3", new { @class = "govuk-label" })
                    @Html.ValidationMessageFor(model => model.Address3, "", new { @class = "govuk-error-message govuk-!-margin-bottom-0" })
                    @Html.CustomEditorFor(model => model.Address3, new { @class = "govuk-input govuk-!-width-one-half" })

                </div>

                <div class="govuk-form-group @Html.SetErrorClass(model => model.Postcode, "govuk-form-group--error")">
                    @Html.LabelFor(model => model.Postcode, new { @class = "govuk-label" })
                    @Html.ValidationMessageFor(model => model.Postcode, "", new { @class = "govuk-error-message govuk-!-margin-bottom-0" })
                    @Html.CustomEditorFor(model => model.Postcode, new { @class = "govuk-input govuk-!-width-one-third" })

                </div>
                <br />
                <input class="govuk-button" type="submit" role="button" name="command" value="Continue" aria-label="Continue" />
            </div>
        }
    </div>
</div>
